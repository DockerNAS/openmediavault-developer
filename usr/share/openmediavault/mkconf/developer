#!/bin/sh
#
# @author    Volker Theile <volker.theile@openmediavault.org>
# @author    OpenMediaVault Plugin Developers <plugins@omv-extras.org>
# @copyright Copyright (c) 2009-2013 Volker Theile
# @copyright Copyright (c) 2014 OpenMediaVault Plugin Developers
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <http://www.gnu.org/licenses/>.

set -e

. /etc/default/openmediavault
. /usr/share/openmediavault/scripts/helper-functions

command=`echo $2 | cut -d \  -f 1`
plugin=`echo $2 | cut -d \  -f 2`
location=`echo $2 | cut -d \  -f 3`
commit=`echo $2 | cut -d \_ -f 2`
package="openmediavault-${plugin}"

xpath="//services/developer"
xpathlocation="${xpath}/locations/location[uuid='${location}']"

owner=$(omv_config_get "${xpath}/owner")
sfref=$(omv_config_get "${xpath}/sharedfolderref")
sfpath=$(omv_get_sharedfolder_path "${sfref}")
temppath="/tmp/"
localepath="usr/share/openmediavault/locale"
txpath=".tx"

if [ -z "${sfpath}" ]; then
    echo "Error - Path not set."
    exit 1
fi

packagepath="${sfpath}/${package}"

initial()
{
    if [ ! -d "${packagepath}" ]; then
        echo "Cloning ${package} from github to ${sfpath} ..."
        cd ${sfpath}
        git clone https://github.com/OpenMediaVault-Plugin-Developers/${package}.git
    fi
}

remove()
{
    if [ -d "${packagepath}" ]; then
        echo "Removing old files ..."
        rm -rfv ${packagepath}
    fi
}

build()
{
    echo "Building ${package}..."
    export LANG=C
    rm -f ${temppath}${package}*.deb
    rm -rf ${temppath}${package}
    cp -r ${packagepath} ${temppath}
    cd ${temppath}${package}
    fakeroot debian/rules clean binary 2>&1
    rm -f ${packagepath}*.deb
    cp -f ${temppath}${package}*.deb ${sfpath}/
    rm -f ${temppath}${package}*.deb
    rm -rf ${temppath}${package}
    chown ${owner}:users ${packagepath}*.deb
}

update()
{
    cd ${packagepath}
    echo "Updating ${package} from github..."
    git pull
    git status
}

upload()
{
    remotehost=$(omv_config_get "${xpathlocation}/remotehost")
    remotepath=$(omv_config_get "${xpathlocation}/remotepath")
    port=$(omv_config_get "${xpathlocation}/port")
    username=$(omv_config_get "${xpathlocation}/username")
    password=$(omv_config_get "${xpathlocation}/password")

    search="${packagepath}_*"
    version=`ls ${search}`

    echo "Uploading ${version} to ${remotehost} ..."
    sshpass -p ${password} scp -P ${port} -o StrictHostKeyChecking=no "${version}" ${username}@${remotehost}:"${remotepath}"
}

tx()
{
    repos="/tmp/repos"
    tx_dir="${sfpath}/.tx"
    tx_file="${tx_dir}/config"

    mkdir -p "${tx_dir}"

    cat <<EOF > ${tx_file}
[main]
host = https://www.transifex.com
lang_map = de: de_DE, it: it_IT, ru: ru_RU, uk: uk_UK, da: da_DA, no: no_NO, sv: sv_SV, es: es_ES, fr: fr_FR, nl: nl_NL
type = PO

EOF

    # repos
    while read repo; do

    cat <<EOF >> ${tx_file}
[${repo}.${repo}pot]
file_filter = ${repo}/usr/share/openmediavault/locale/<lang>/${repo}.po
source_file = ${repo}/usr/share/openmediavault/locale/${repo}.pot
source_lang = en

EOF
    done < ${repos}

    chown -R ${owner}:users ${tx_dir}
    rm -f ${repos}
}

moveto()
{
    rm -rf ${temppath}${package}
    rm -rf ${temppath}${txpath}
    cp -r ${packagepath} ${temppath}
    cp -r ${sfpath}/${txpath} ${temppath}
}

movefrom()
{
    cp -rf ${temppath}${package} ${sfpath}/
    rm -rf ${temppath}${package}
}

buildpot()
{
    moveto
    cd ${temppath}${package}
    fakeroot debian/rules omv_build_pot 2>&1
    movefrom
}

pushpot()
{
    moveto
    cd ${temppath}${package}
    fakeroot debian/rules omv_push_pot 2>&1
    movefrom
}

pullpo()
{
    moveto
    cd ${temppath}${package}
    fakeroot debian/rules omv_pull_po 2>&1
    movefrom
}

install()
{
    search="${packagepath}_*"
    version=`ls ${search}`

    echo "Installing ${package} ..."
    export LANG=C
    export DEBIAN_FRONTEND=noninteractive
    dpkg -i "${version}"
    apt-get --yes --force-yes --fix-missing -f install
}

fixperms()
{
    mkconfpath="/usr/share/openmediavault/mkconf"
    localbinpath="/usr/local/bin"
    etcinitpath="/etc/init.d/"
    etcsupportpath="/etc/omv-support.d/"
    etcnetworkpath="/etc/network/if-up.d/"
    sysinfopath="/usr/share/openmediavault/sysinfo/modules.d/"
    varlibcronpath="/var/lib/openmediavault/cron.d/"
    echo "Fixing permissions..."

    find "${packagepath}" -type f -exec chmod 644 {} +
    find "${packagepath}" -type d -exec chmod 755 {} +

    find "${packagepath}" -type f -name "*.sh" -exec chmod 755 {} +

    if [ -d "${packagepath}${mkconfpath}" ]; then
        chmod -R 755 "${packagepath}${mkconfpath}"/*
    fi

    if [ -d "${packagepath}${localbinpath}" ]; then
        chmod 755 "${packagepath}${localbinpath}"/*
    fi

    if [ -d "${packagepath}${etcinitpath}" ]; then
        chmod 755 "${packagepath}${etcinitpath}"/*
    fi

    if [ -d "${packagepath}${etcsupportpath}" ]; then
        chmod 755 "${packagepath}${etcsupportpath}"/*
    fi

    if [ -d "${packagepath}${etcnetworkpath}" ]; then
        chmod 755 "${packagepath}${etcnetworkpath}"/*
    fi

    if [ -d "${packagepath}${sysinfopath}" ]; then
        chmod 755 "${packagepath}${sysinfopath}"/*
    fi

    if [ -d "${packagepath}${varlibcronpath}" ]; then
        chmod 755 "${packagepath}${varlibcronpath}"/*
    fi

    chmod 755 "${packagepath}/debian/rules"
    if [ -f "${packagepath}/debian/${plugin}.init" ]; then
        chmod 755 "${packagepath}/debian/${plugin}.init"
    fi
    chown -R ${owner}:users "${packagepath}"
}

gitadd()
{
    cd ${packagepath}
    echo "Adding all files ..."
    git add * 2>&1
}

gitcommit()
{
    cd ${packagepath}
    git commit -m "${commit}" 2>&1
}

gitpush()
{
    if [ ! -f "/root/.netrc" ]; then
        echo ".netrc not found"
        exit 1
    fi

    cd ${packagepath}
    git push 2>&1
}

gitstatus()
{
    cd ${packagepath}
    git status 2>&1
}

dchi()
{
    export DEBEMAIL="plugins@omv-extras.org"
    export DEBFULLNAME="OpenMediaVault Plugin Developers"
    cd ${packagepath}
    echo "Increment version ..."
    dch -U --no-auto-nmu -i "${commit}" 2>&1
    head -n 1 debian/changelog
}

dcha()
{
    export DEBEMAIL="plugins@omv-extras.org"
    export DEBFULLNAME="OpenMediaVault Plugin Developers"
    cd ${packagepath}
    echo "Add changelog line ..."
    dch -U --no-auto-nmu -a "${commit}" 2>&1
}

dchr()
{
    export DEBEMAIL="plugins@omv-extras.org"
    export DEBFULLNAME="OpenMediaVault Plugin Developers"
    cd ${packagepath}
    echo "Release version ..."
    dch -U --no-auto-nmu -r "release" 2>&1
    head -n 1 debian/changelog
}

omvsvn()
{
    echo "Installing OMV svn ..."
    export LANG=C
    export DEBIAN_FRONTEND=noninteractive

    omvcode="openmediavault-code"
    omvcodepath="${sfpath}/${omvcode}"

    if [ ! -d "${omvcodepath}" ]; then
        cd ${sfpath}
        svn checkout svn://svn.code.sf.net/p/openmediavault/code/trunk ${omvcode}
    else
        cd ${omvcodepath}
        svn update
    fi

    # get revision
    cd ${omvcodepath}
    revision=$(svn info | grep "Revision:" | cut -f2 -d":" | tr -d " ")
    echo "Revision ${revision}..."

    # get version
    cd ${omvcodepath}/deb/openmediavault
    version=$(head -n 1 debian/changelog | cut -f2 -d"(" | cut -f1 -d")")
    echo "Version ${version}"

    # copy files to temp path to build package
    rm -rf ${temppath}openmediavault
    cp -rf ${omvcodepath}/deb/openmediavault ${temppath}
    cp -f  ${omvcodepath}/deb/openmediavault.mk ${temppath}

    # make svn package
    cd ${temppath}openmediavault
    svn update
    fakeroot debian/rules clean binary
    mv -v ../openmediavault_${version}_all.deb ${sfpath}openmediavault_${version}-svn${revision}_all.deb

    dpkg --force-confold -i ${sfpath}/openmediavault_${version}-svn${revision}_all.deb
    apt-get --yes --force-yes --fix-missing -f install
}

changelog()
{
    export LANG=C
    cd ${packagepath}
    cat debian/changelog
}

case ${command} in
    update)
        initial
        update
        fixperms
    ;;

    reset)
        remove
        initial
        update
        fixperms
    ;;

    build)
        initial
        fixperms
        build
        fixperms
    ;;

    upload)
        initial
        fixperms
        build
        fixperms
        upload
    ;;

    tx)
        tx
    ;;

    buildpot)
        initial
        buildpot
        fixperms
    ;;

    pushpot)
        initial
        pushpot
        fixperms
    ;;

    pullpo)
        initial
        pullpo
        fixperms
    ;;

    install)
        initial
        fixperms
        build
        fixperms
        install
    ;;

    add)
        fixperms
        gitadd
    ;;

    commit)
        initial
        fixperms
        gitcommit
    ;;

    push)
        initial
        fixperms
        gitpush
    ;;

    status)
        initial
        fixperms
        gitstatus
    ;;

    dchi)
        fixperms
        dchi
    ;;

    dcha)
        initial
        fixperms
        dcha
    ;;

    dchr)
        initial
        fixperms
        dchr
    ;;

    omvsvn)
        omvsvn
    ;;

    changelog)
        initial
        changelog
    ;;

    *)
    ;;
esac

exit 0
